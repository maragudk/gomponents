package svg_test

import (
	"fmt"
	"testing"

	g "github.com/maragudk/gomponents"
	"github.com/maragudk/gomponents/internal/assert"
	. "github.com/maragudk/gomponents/svg"
)

func TestSimpleAttributes(t *testing.T) {
	cases := map[string]func(string) g.Node{
		"clip-rule":                   ClipRule,
		"d":                           D,
		"fill":                        Fill,
		"fill-rule":                   FillRule,
		"stroke":                      Stroke,
		"stroke-width":                StrokeWidth,
		"viewBox":                     ViewBox,
		"height":                      Height,
		"width":                       Width,
		"x":                           X,
		"y":                           Y,
		"cx":                          Cx,
		"cy":                          Cy,
		"r":                           R,
		"rx":                          Rx,
		"ry":                          Ry,
		"opacity":                     Opacity,
		"fill-opacity":                FillOpacity,
		"font-size":                   FontSize,
		"font-family":                 FontFamily,
		"pathLength":                  PathLength,
		"accumulate":                  Accumulate,
		"additive":                    Additive,
		"alignment-baseline":          AlignmentBaseline,
		"amplitude":                   Amplitude,
		"azimuth":                     Azimuth,
		"baseFrequency":               BaseFrequency,
		"baseline-shift":              BaselineShift,
		"begin":                       Begin,
		"bias":                        Bias,
		"by":                          By,
		"calcMode":                    CalcMode,
		"clip-path":                   ClipPath,
		"clipPathUnits":               ClipPathUnits,
		"color":                       Color,
		"color-interpolation":         ColorInterpolation,
		"color-interpolation-filters": ColorInterpolationFilters,
		"cursor":                      Cursor,
		"diffuseConstant":             DiffuseConstant,
		"direction":                   Direction,
		"display":                     Display,
		"divisor":                     Divisor,
		"dominant-baseline":           DominantBaseline,
		"dur":                         Dur,
		"dx":                          Dx,
		"dy":                          Dy,
		"edgeMode":                    EdgeMode,
		"elevation":                   Elevation,
		"end":                         End,
		"exponent":                    Exponent,
		"filter":                      Filter,
		"filterUnits":                 FilterUnits,
		"flood-color":                 FloodColor,
		"flood-opacity":               FloodOpacity,
		"font-size-adjust":            FontSizeAdjust,
		"font-stretch":                FontStretch,
		"font-style":                  FontStyle,
		"font-variant":                FontVariant,
		"font-weight":                 FontWeight,
		"fr":                          Fr,
		"from":                        From,
		"fx":                          Fx,
		"fy":                          Fy,
		"href":                        Href,
		"id":                          Id,
		"image-rendering":             ImageRendering,
		"in":                          In,
		"in2":                         In2,
		"intercept":                   Intercept,
		"k1":                          K1,
		"k2":                          K2,
		"k3":                          K3,
		"k4":                          K4,
		"kernelMatrix":                KernelMatrix,
		"kernelUnitLength":            KernelUnitLength,
		"keyPoints":                   KeyPoints,
		"keySplines":                  KeySplines,
		"keyTimes":                    KeyTimes,
		"lang":                        Lang,
		"lengthAdjust":                LengthAdjust,
		"letter-spacing":              LetterSpacing,
		"lighting-color":              LightingColor,
		"limitingConeAngle":           LimitingConeAngle,
		"marker-end":                  MarkerEnd,
		"marker-mid":                  MarkerMid,
		"marker-start":                MarkerStart,
		"markerHeight":                MarkerHeight,
		"markerUnits":                 MarkerUnits,
		"markerWidth":                 MarkerWidth,
		"mask":                        Mask,
		"maskContentUnits":            MaskContentUnits,
		"maskUnits":                   MaskUnits,
		"max":                         Max,
		"media":                       Media,
		"min":                         Min,
		"mode":                        Mode,
		"numOctaves":                  NumOctaves,
		"operator":                    Operator,
		"order":                       Order,
		"orient":                      Orient,
		"origin":                      Origin,
		"overflow":                    Overflow,
		"overline-position":           OverlinePosition,
		"overline-thickness":          OverlineThickness,
		"paint-order":                 PaintOrder,
		"patternContentUnits":         PatternContentUnits,
		"patternTransform":            PatternTransform,
		"patternUnits":                PatternUnits,
		"pointer-events":              PointerEvents,
		"points":                      Points,
		"pointsAtX":                   PointsAtX,
		"pointsAtY":                   PointsAtY,
		"pointsAtZ":                   PointsAtZ,
		"preserveAlpha":               PreserveAlpha,
		"preserveAspectRatio":         PreserveAspectRatio,
		"primitiveUnits":              PrimitiveUnits,
		"radius":                      Radius,
		"refX":                        RefX,
		"refY":                        RefY,
		"repeatCount":                 RepeatCount,
		"repeatDur":                   RepeatDur,
		"restart":                     Restart,
		"result":                      Result,
		"scale":                       Scale,
		"seed":                        Seed,
		"shape-rendering":             ShapeRendering,
		"slope":                       Slope,
		"spacing":                     Spacing,
		"specularConstant":            SpecularConstant,
		"specularExponent":            SpecularExponent,
		"spreadMethod":                SpreadMethod,
		"startOffset":                 StartOffset,
		"stdDeviation":                StdDeviation,
		"stitchTiles":                 StitchTiles,
		"stop-color":                  StopColor,
		"stop-opacity":                StopOpacity,
		"strikethrough-position":      StrikethroughPosition,
		"strikethrough-thickness":     StrikethroughThickness,
		"stroke-dasharray":            StrokeDasharray,
		"stroke-dashoffset":           StrokeDashoffset,
		"stroke-linecap":              StrokeLinecap,
		"stroke-linejoin":             StrokeLinejoin,
		"stroke-miterlimit":           StrokeMiterlimit,
		"stroke-opacity":              StrokeOpacity,
		"style":                       Style,
		"surfaceScale":                SurfaceScale,
		"crossorigin":                 Crossorigin,
		"systemLanguage":              SystemLanguage,
		"tabindex":                    Tabindex,
		"tableValues":                 TableValues,
		"target":                      Target,
		"targetX":                     TargetX,
		"targetY":                     TargetY,
		"text-anchor":                 TextAnchor,
		"text-decoration":             TextDecoration,
		"text-rendering":              TextRendering,
		"textLength":                  TextLength,
		"to":                          To,
		"transform":                   Transform,
		"transform-origin":            TransformOrigin,
		"type":                        Type,
		"underline-position":          UnderlinePosition,
		"underline-thickness":         UnderlineThickness,
		"unicode-bidi":                UnicodeBidi,
		"values":                      Values,
		"vector-effect":               VectorEffect,
		"visibility":                  Visibility,
		"word-spacing":                WordSpacing,
		"writing-mode":                WritingMode,
		"x1":                          X1,
		"x2":                          X2,
		"xChannelSelector":            XChannelSelector,
		"y1":                          Y1,
		"y2":                          Y2,
		"yChannelSelector":            YChannelSelector,
		"z":                           Z,
	}

	for name, fn := range cases {
		t.Run(fmt.Sprintf(`should output %v="hat"`, name), func(t *testing.T) {
			n := g.El("element", fn("hat"))
			assert.Equal(t, fmt.Sprintf(`<element %v="hat"></element>`, name), n)
		})
	}
}
